plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    api group: 'org.apache.mina', name: 'mina-core', version: '2.2.3'
    api group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
    api group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
    api group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.17.2'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

jar {
    manifest {
        attributes("Implementation-Title": 'MRCPv2 library for Java',
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': version,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    archiveBaseName = 'org.mrcp4j'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = tasks.jar.archiveBaseName.get()
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'MRCP4j'
                description = 'MRCP4J provides a Java API that encapsulates the MRCPv2 protocol and can be used to implement MRCP clients and/or servers.'
                url = 'https://github.com/JVoiceXML/mrcp4j'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id = 'schnelle'
                        name = 'Dirk Schnelle-Walka'
                        email = 'dirk.schnelle@jvoicexml.org'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:JVoiceXML/mrcp4j.git'
                    developerConnection = 'scm:git@github.com:JVoiceXML/mrcp4j.git'
                    url = "https://github.com/JVoiceXML/mrcp4j"
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/" 
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = JVOICEXML_OSSRH_USERNAME
                password = JVOICEXML_OSSRH_PASSWORD
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Changelog generation task
task generateChangelog {
    description = 'Generates an HTML changelog from GitHub issues in a milestone'
    group = 'documentation'
    
    def outputDir = file("${buildDir}/changelog")
    outputs.dir outputDir
    
    doLast {
        // Get configuration properties
        def githubRepo = project.findProperty('changelog.github.repo') ?: 'schnelle/mrcp4j'
        def milestone = project.findProperty('changelog.github.milestone')
        def githubToken = project.findProperty('changelog.github.token')
        
        if (!milestone) {
            throw new GradleException("Please specify a milestone using -Pchangelog.github.milestone=MILESTONE_NAME")
        }
        
        // Create output directory
        outputDir.mkdirs()
        
        // Generate changelog
        generateChangelogFromGitHub(githubRepo, milestone, githubToken, outputDir)
    }
}

def generateChangelogFromGitHub(String repo, String milestone, String token, File outputDir) {
    def baseUrl = "https://api.github.com"
    
    // First, get the milestone ID
    def milestonesUrl = "${baseUrl}/repos/${repo}/milestones"
    def milestonesResponse = makeGitHubRequest(milestonesUrl, token)
    
    def milestones = parseJsonResponse(milestonesResponse)
    def targetMilestone = milestones.find { it.title == milestone }
    
    if (!targetMilestone) {
        def availableMilestones = milestones.collect { it.title }.join(', ')
        throw new GradleException("Milestone '${milestone}' not found. Available milestones: ${availableMilestones}")
    }
    
    def milestoneNumber = targetMilestone.number
    
    // Get issues for the milestone
    def issuesUrl = "${baseUrl}/repos/${repo}/issues?milestone=${milestoneNumber}&state=all&per_page=100"
    def issuesResponse = makeGitHubRequest(issuesUrl, token)
    def issues = parseJsonResponse(issuesResponse)
    
    // Sort issues by type (based on labels)
    def issuesByType = [:]
    issues.each { issue ->
        def type = categorizeIssue(issue)
        if (!issuesByType.containsKey(type)) {
            issuesByType[type] = []
        }
        issuesByType[type].add(issue)
    }
    
    // Generate HTML
    def html = generateHtml(repo, milestone, targetMilestone, issuesByType)
    
    // Write to file
    def outputFile = new File(outputDir, "changelog-${milestone.replaceAll('[^a-zA-Z0-9]', '-')}.html")
    outputFile.text = html
    
    println "Changelog generated: ${outputFile.absolutePath}"
    println "Found ${issues.size()} issues in milestone '${milestone}'"
}

def makeGitHubRequest(String url, String token) {
    def connection = new URL(url).openConnection()
    connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
    connection.setRequestProperty("User-Agent", "mrcp4j-changelog-generator")
    
    if (token) {
        connection.setRequestProperty("Authorization", "Bearer ${token}")
    }
    
    if (connection.responseCode != 200) {
        throw new GradleException("Failed to fetch from GitHub API: ${connection.responseCode} ${connection.responseMessage}")
    }
    
    return connection.inputStream.text
}

def parseJsonResponse(String jsonText) {
    // Simple JSON parsing using built-in Groovy JsonSlurper
    def jsonSlurper = new groovy.json.JsonSlurper()
    return jsonSlurper.parseText(jsonText)
}

def categorizeIssue(issue) {
    def labels = issue.labels?.collect { it.name } ?: []
    
    // Categorize based on labels
    if (labels.any { it.toLowerCase().contains('bug') || it.toLowerCase().contains('fix') }) {
        return 'Bug Fixes'
    } else if (labels.any { it.toLowerCase().contains('enhancement') || it.toLowerCase().contains('feature') }) {
        return 'Enhancements'
    } else if (labels.any { it.toLowerCase().contains('documentation') || it.toLowerCase().contains('doc') }) {
        return 'Documentation'
    } else if (labels.any { it.toLowerCase().contains('test') }) {
        return 'Testing'
    } else if (labels.any { it.toLowerCase().contains('chore') || it.toLowerCase().contains('maintenance') }) {
        return 'Maintenance'
    } else {
        return 'Other'
    }
}

def generateHtml(String repo, String milestone, Map milestoneData, Map issuesByType) {
    def html = new StringBuilder()
    def repoUrl = "https://github.com/${repo}"
    def milestoneUrl = "${repoUrl}/milestone/${milestoneData.number}"
    
    html << """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Changelog - ${milestone}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        .milestone-info {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
        }
        .issue-category {
            margin: 30px 0;
        }
        .issue-list {
            list-style: none;
            padding: 0;
        }
        .issue-item {
            background: #fff;
            border: 1px solid #e1e4e8;
            border-radius: 5px;
            margin: 10px 0;
            padding: 15px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .issue-title {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .issue-title a {
            color: #0366d6;
            text-decoration: none;
        }
        .issue-title a:hover {
            text-decoration: underline;
        }
        .issue-meta {
            font-size: 0.9em;
            color: #6a737d;
        }
        .issue-labels {
            margin-top: 10px;
        }
        .label {
            display: inline-block;
            background: #f1f8ff;
            color: #0366d6;
            padding: 2px 8px;
            margin: 2px;
            border-radius: 12px;
            font-size: 0.8em;
        }
        .state-closed {
            color: #28a745;
        }
        .state-open {
            color: #d73a49;
        }
    </style>
</head>
<body>
    <h1>Changelog - ${milestone}</h1>
    
    <div class="milestone-info">
        <p><strong>Repository:</strong> <a href="${repoUrl}">${repo}</a></p>
        <p><strong>Milestone:</strong> <a href="${milestoneUrl}">${milestone}</a></p>"""
    
    if (milestoneData.description) {
        html << "\n        <p><strong>Description:</strong> ${milestoneData.description}</p>"
    }
    
    if (milestoneData.due_on) {
        html << "\n        <p><strong>Due Date:</strong> ${milestoneData.due_on}</p>"
    }
    
    html << """
        <p><strong>Generated:</strong> ${new Date().format('yyyy-MM-dd HH:mm:ss')} UTC</p>
    </div>
"""
    
    if (issuesByType.isEmpty()) {
        html << """
    <div class="issue-category">
        <p>No issues found in this milestone.</p>
    </div>
"""
    } else {
        // Sort categories for consistent output
        def sortedCategories = issuesByType.keySet().sort()
        
        sortedCategories.each { category ->
            def issues = issuesByType[category]
            html << """
    <div class="issue-category">
        <h2>${category} (${issues.size()})</h2>
        <ul class="issue-list">"""
            
            issues.each { issue ->
                def stateClass = issue.state == 'closed' ? 'state-closed' : 'state-open'
                html << """
            <li class="issue-item">
                <div class="issue-title">
                    <a href="${issue.html_url}" target="_blank">#${issue.number}: ${issue.title}</a>
                    <span class="${stateClass}">[${issue.state}]</span>
                </div>
                <div class="issue-meta">
                    Created by ${issue.user.login} on ${issue.created_at.substring(0, 10)}"""
                
                if (issue.closed_at) {
                    html << " • Closed on ${issue.closed_at.substring(0, 10)}"
                }
                
                html << """
                </div>"""
                
                if (issue.labels && !issue.labels.isEmpty()) {
                    html << """
                <div class="issue-labels">"""
                    issue.labels.each { label ->
                        html << """
                    <span class="label">${label.name}</span>"""
                    }
                    html << """
                </div>"""
                }
                
                html << """
            </li>"""
            }
            
            html << """
        </ul>
    </div>"""
        }
    }
    
    html << """
</body>
</html>"""
    
    return html.toString()
}
